@page "/urls"

@using global::UrlShortener.Models
@using global::UrlShortener.ApiServices

@inject IUrlShortenerService UrlShortenerService
@inject ISnackbar Snackbar

<PageTitle>Url Shortener</PageTitle>
<EditForm Model="_requestModel" OnValidSubmit="OnCreateShortenUrlSubmit" FormName="ShortenForm">
    <DataAnnotationsValidator />
    <MudGrid Class="p-4">
        <MudItem xs="8">
            <MudTextField T="string" Variant="Variant.Outlined" Label="URL" @bind-Value="_requestModel.LongUrl" For="() => _requestModel.LongUrl" Margin="Margin.Dense" />
        </MudItem>
        <MudItem xs="4">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large">Short URL</MudButton>
        </MudItem>
    </MudGrid>
</EditForm>
<MudSpacer />
<MudGrid Class="p-4">
    <MudItem xs="12">
        <MudDataGrid T="ShortenedUrl" Items="_shortenedUrls"
                     SortMode="SortMode.Multiple">
            <Columns>
                <SelectColumn T="ShortenedUrl" />
                <PropertyColumn Property="x => x.Id" Title="ID" />
                <PropertyColumn Property="x => x.LongUrl" Title="Long URL" />
                <PropertyColumn Property="x => x.ShortCode" Title="Short Code" />
                <PropertyColumn Property="x => x.CreatedAt" Title="Created Date" Format="dd/MM/yyyy" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ShortenedUrl" />
            </PagerContent>
        </MudDataGrid>

    </MudItem>
</MudGrid>

@code {
    private IEnumerable<ShortenedUrl> _shortenedUrls = new List<ShortenedUrl>();
    private readonly ShortenUrlRequest _requestModel = new();

    protected override async Task OnInitializedAsync()
    {
        _shortenedUrls = await UrlShortenerService.GetUrls();
    }

    private async Task OnCreateShortenUrlSubmit(EditContext context)
    {
        await UrlShortenerService.ShortenUrl(_requestModel);
        _shortenedUrls = await UrlShortenerService.GetUrls();
        Snackbar.Add("Shortened URL created successfully", Severity.Success);
        StateHasChanged();
    }
}
